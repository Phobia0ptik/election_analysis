import pandas as pd
import numpy as np
from cluster import nmf_articles
from sklearn.metrics.pairwise import pairwise_distances
from progressbar import ProgressBar
import matplotlib.pyplot as plt
import seaborn as sns


def nmf_similarity(df, num_topics):
    print 'Processing {} Topics...'.format(num_topics)
    tfid, nmf, X, W, labels, topic_words, feature_names, reverse_lookup = nmf_articles(df, n_topics=num_topics, n_features=10000, random_state=1, max_df=0.8, min_df=5)
    print 'Clustering Done...'
    pbar = ProgressBar()
    tfidf_similarity = []
    for topic in pbar(xrange(num_topics)):
        # When looking at high numbers of topics, it is possible for no points to be assigned to that topic, in which case pairwise_distances() will throw an error
        if len(labels[labels == topic]):
            cosine_dist = pairwise_distances(X[labels == topic], metric='cosine', n_jobs=-1)
            idx = np.tril_indices(cosine_dist.shape[0], k=-1)
            tfidf_similarity.append(1 - cosine_dist[idx].mean())
    topic_similarity = pairwise_distances(nmf.components_, metric='cosine', n_jobs=1)
    idx = np.tril_indices(topic_similarity.shape[0], k=-1)
    print '\n'
    return np.mean(tfidf_similarity), 1 - topic_similarity[idx].mean(), nmf.reconstruction_err_


def make_similarity_plot(n_topics, tfidf_similarity, topic_similarity):
    fig = plt.figure(figsize=(12, 8))
    ax1 = fig.add_subplot(211)
    ax1.plot(n_topics, topic_similarity)
    plt.setp(ax1.get_xticklabels(), visible=False)
    plt.title('Between Topics', fontsize=11)
    ax2 = fig.add_subplot(212, sharex=ax1)
    plt.plot(n_topics, tfidf_similarity)
    plt.xlabel('Number of Topics')
    ax1.set_ylabel('Avg Cosine Similarity')
    ax2.set_ylabel('Avg Cosine Similarity')
    plt.title('Articles Within Topics', fontsize=11)
    plt.suptitle('Cosine Similarity of NMF Model', fontsize=18, x=0.52)
    plt.subplots_adjust(left=0.09, right=0.95, top=0.87, hspace=0.16)
    plt.savefig('plots/nmf_similarity_2.png', dpi=350)


if __name__=='__main__':
    df = pd.read_pickle('election_data.pkl')

    n_topics = range(2, 41) + range(42, 101, 2) + range(105, 176, 5)
    similarity = [nmf_similarity(df, n_topic) for n_topic in n_topics]
    tfidf_similarity = np.array(zip(*similarity)[0])
    topic_similarity = np.array(zip(*similarity)[1])
    reconst_err = np.array(zip(*similarity)[2])

    make_similarity_plot(n_topics, tfidf_similarity, topic_similarity)




# n_topics = range(2, 41) + range(42, 101, 2) + range(105, 251, 5)
# tfidf_similarity = [ 0.08524491,  0.10525322,  0.10734238,  0.11844839,  0.12310939,
#         0.12816451,  0.140281  ,  0.12760329,  0.12860724,  0.14734961,
#         0.14900709,  0.14839188,  0.15249904,  0.15305921,  0.15878581,
#         0.15781208,  0.16012219,  0.15633803,  0.16528606,  0.16357886,
#         0.16595005,  0.16932109,  0.16720143,  0.16723499,  0.16871008,
#         0.17003943,  0.17592374,  0.17407378,  0.17432669,  0.17636237,
#         0.17785948,  0.17749425,  0.18325713,  0.18247205,  0.17919728,
#         0.18711522,  0.18343073,  0.18155485,  0.18004424,  0.1857256 ,
#         0.18923883,  0.20510895,  0.20223772,  0.19722288,  0.20188253,
#         0.19303887,  0.20801282,  0.20621667,  0.2164946 ,  0.2090062 ,
#         0.20756569,  0.21176189,  0.2186945 ,  0.21762769,  0.21303572,
#         0.21337922,  0.22336065,  0.21641568,  0.21597078,  0.21871554,
#         0.22930038,  0.22551194,  0.22729863,  0.22804003,  0.22084609,
#         0.22829405,  0.23039367,  0.22234662,  0.23040942,  0.22620052,
#         0.232864  ,  0.23168416,  0.23074789,  0.23293127,  0.23117288,
#         0.23258201,  0.23083558,  0.22947935,  0.22571734,  0.23543862,
#         0.23598997, 0.23082078,  0.22937402,  0.22684528,  0.22983774,  0.22692765,
#         0.22183851,  0.22779209,  0.22826657,  0.23001447,  0.22585542,
#         0.22795053,  0.22442707,  0.22844981,  0.22834926,  0.22717903,
#         0.21890694,  0.22811775,  0.22229566]
# topic_similarity = [ 0.39687157,  0.26041431,  0.2456308 ,  0.23533903,  0.18675414,
#         0.15691973,  0.1502047 ,  0.14268457,  0.13394682,  0.10967881,
#         0.10281404,  0.09876   ,  0.0857144 ,  0.08665115,  0.07881108,
#         0.07401872,  0.07094319,  0.07170251,  0.06158362,  0.06047053,
#         0.05791291,  0.05542205,  0.05095444,  0.05152319,  0.04933687,
#         0.04723271,  0.04545711,  0.05195084,  0.04430905,  0.0425383 ,
#         0.04147939,  0.04054506,  0.040741  ,  0.0398747 ,  0.03721943,
#         0.0382676 ,  0.037777  ,  0.03609759,  0.03963968,  0.03716838,
#         0.03310919,  0.03217583,  0.02781199,  0.0295093 ,  0.02893207,
#         0.02812181,  0.0268533 ,  0.02611895,  0.0263722 ,  0.024817  ,
#         0.02370388,  0.02252769,  0.02287074,  0.02266524,  0.02083961,
#         0.02183094,  0.02081696,  0.02018817,  0.01975611,  0.01902177,
#         0.0181641 ,  0.0193961 ,  0.01828759,  0.01770344,  0.01642792,
#         0.01670408,  0.01597302,  0.01626664,  0.01595064,  0.01489296,
#         0.01372745,  0.01381251,  0.01317511,  0.01174532,  0.01150062,
#         0.01048611,  0.00987369,  0.00961604,  0.00921795,  0.00867276,
#         0.00843186, 0.00776525,  0.00711189,  0.00640042,  0.00616018,  0.00580659,
#         0.00551407,  0.0051605 ,  0.00485928,  0.00439004,  0.00441375,
#         0.00384404,  0.00393753,  0.00356787,  0.00367201,  0.00339551,
#         0.00318865,  0.00301529,  0.00288266]
# reconst_err = [ 108.0055722 ,  107.33829492,  106.87204984,  106.42835497,
#         106.08744466,  105.74317374,  105.47987819,  105.18045669,
#         104.89541781,  104.67262984,  104.29339644,  104.05609305,
#         103.89871101,  103.58170925,  103.41358749,  103.16427113,
#         102.9547213 ,  102.90420357,  102.53354706,  102.31906165,
#         102.11213288,  102.03067264,  101.78673305,  101.59638177,
#         101.3989038 ,  101.28717711,  101.25164721,  101.19144919,
#         100.90304281,  100.71820985,  100.61608173,  100.48113073,
#         100.34617819,  100.2156571 ,  100.08904318,  100.07767938,
#          99.88345607,   99.83734853,   99.54748406,   99.39377126,
#          99.10810267,   99.02386843,   98.85969431,   98.55708799,
#          98.33436923,   98.08083747,   98.0191779 ,   97.87048494,
#          97.64293028,   97.46089215,   97.32344172,   97.1368477 ,
#          97.08636726,   96.84640906,   96.71382612,   96.60998298,
#          96.38776471,   96.25001168,   96.18891681,   96.16860192,
#          95.9334235 ,   95.64943333,   95.63834835,   95.45122747,
#          95.44574018,   95.2158145 ,   95.16031877,   95.05718578,
#          94.8892929 ,   94.69052833,   94.53205955,   94.10302902,
#          93.93367736,   93.90159036,   93.623205  ,   93.83349553,
#          93.55245676,   93.48770249,   93.30308566,   93.2046487 ,
#          93.33977044, 93.4271445 ,  93.18635169,  93.53013663,  93.52606192,
#         93.55337238,  93.51043367,  93.6978001 ,  93.63105197,
#         93.79717662,  93.76053012,  94.23098896,  94.03301477,
#         94.12244531,  93.85371893,  93.9759249 ,  94.01845283,
#         94.23986996,  94.28741348]
