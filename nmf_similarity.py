import pandas as pd
import numpy as np
from NMF_Clustering import NMFClustering
from sklearn.metrics.pairwise import pairwise_distances
from progressbar import ProgressBar
# import matplotlib.pyplot as plt
# plt.style.use('ggplot')


def nmf_similarity(df, num_topics):
    print 'Processing {} Topics...'.format(num_topics)
    nmf = NMFClustering(num_topics, tfidf_max_features=8000, tfidf_max_df=0.75, random_state=42)
    nmf.fit(df)
    print 'Clustering Done...'
    pbar = ProgressBar()
    tfidf_similarity = []
    num_zero = 0
    for topic in pbar(xrange(num_topics)):
        # When looking at high numbers of topics, it is possible for no points to be assigned to that topic, in which case pairwise_distances() will throw an error.  The label should also be skipped if only one article is assigned as pairwise_distances will return nan
        if nmf.labels[:, topic].sum() > 1:
            cosine_dist = pairwise_distances(nmf.tfidf_matrix[nmf.labels[:, topic]], metric='cosine', n_jobs=-1)
            idx = np.tril_indices(cosine_dist.shape[0], k=-1)
            tfidf_similarity.append(1 - cosine_dist[idx].mean())
        else:
            num_zero += 1
    topic_similarity = pairwise_distances(nmf.nmf.components_, metric='cosine', n_jobs=1)
    idx = np.tril_indices(topic_similarity.shape[0], k=-1)
    if num_zero:
        print 'Number of Empty Topics: {}'.format(num_zero)
    print '\n'
    return np.mean(tfidf_similarity), 1 - topic_similarity[idx].mean(), nmf.nmf.reconstruction_err_


def make_similarity_plot(n_topics, tfidf_similarity, topic_similarity, reconst_err, x=None):
    fig = plt.figure(figsize=(12, 8))
    ax1 = fig.add_subplot(311)
    ax1.plot(n_topics, topic_similarity)
    plt.setp(ax1.get_xticklabels(), visible=False)
    plt.title('Between Topics', fontsize=11)
    ax2 = fig.add_subplot(312, sharex=ax1)
    plt.plot(n_topics, tfidf_similarity)
    plt.setp(ax2.get_xticklabels(), visible=False)
    plt.title('Articles Within Topics', fontsize=11)
    ax3 = fig.add_subplot(313, sharex=ax1)
    plt.plot(n_topics, reconst_err)
    ax1.set_ylabel('Avg Cosine Similarity')
    ax2.set_ylabel('Avg Cosine Similarity')
    ax3.set_ylabel('Reconstruction Error')
    plt.xlabel('Number of Topics')
    if x:
        ax1.axvline(x=x, color='#4c72b0', linestyle='--')
        ax2.axvline(x=x, color='#4c72b0', linestyle='--')
        ax3.axvline(x=x, color='#4c72b0', linestyle='--')
    plt.suptitle('Cosine Similarity of NMF Model', fontsize=18, x=0.52)
    plt.subplots_adjust(left=0.08, right=0.97, top=0.90, hspace=0.16)
    # plt.tight_layout()
    plt.savefig('plots/nmf_similarity_test.png', dpi=350)
    plt.close()


if __name__=='__main__':
    df = pd.read_pickle('election_data.pkl')

    n_topics = range(2, 120)  + range(120, 200, 2) + range(200, 400, 5) + range(400, 501, 10)
    similarity = [nmf_similarity(df, n_topic) for n_topic in n_topics]
    tfidf_similarity = np.array(zip(*similarity)[0])
    topic_similarity = np.array(zip(*similarity)[1])
    reconst_err = np.array(zip(*similarity)[2])

    # Generated these values by running the above code on an AWS instance
    # n_topics = range(2, 120)  + range(120, 200, 2) + range(200, 300, 5) + range(300, 500, 10)
    # tfidf_similarity = np.array([ 0.07241204,  0.08067165,  0.08111483,  0.08402468,  0.08397889,
    #         0.08882869,  0.08928822,  0.09055349,  0.09273816,  0.09400491,
    #         0.0931941 ,  0.09603154,  0.09510582,  0.09879016,  0.0992579 ,
    #         0.09948934,  0.10339638,  0.10373623,  0.10618623,  0.10395435,
    #         0.10456381,  0.1056184 ,  0.1091172 ,  0.10946842,  0.1089448 ,
    #         0.11084343,  0.11078609,  0.1123428 ,  0.11374788,  0.11106599,
    #         0.11431787,  0.11618255,  0.1161894 ,  0.11718566,  0.11632887,
    #         0.11668448,  0.11681521,  0.11841483,  0.11851557,  0.11822323,
    #         0.11897914,  0.12022045,  0.11969195,  0.1185778 ,  0.12110431,
    #         0.12075395,  0.12218741,  0.1215595 ,  0.12417451,  0.12331804,
    #         0.12355963,  0.12356608,  0.12420396,  0.12504559,  0.12489918,
    #         0.12556189,  0.12668058,  0.12698913,  0.12685605,  0.12830635,
    #         0.12855729,  0.12799086,  0.13290281,  0.13138817,  0.13167119,
    #         0.1307781 ,  0.13051511,  0.13632275,  0.13200778,  0.13309584,
    #         0.13308315,  0.13395304,  0.13868152,  0.13412891,  0.13948069,
    #         0.13841124,  0.13952709,  0.13683903,  0.14171278,  0.13666098,
    #         0.14133219,  0.13841064,  0.13868718,  0.1377494 ,  0.14363093,
    #         0.13848451,  0.13828318,  0.14529842,  0.14242831,  0.14471221,
    #         0.14625302,  0.14623265,  0.14311148,  0.14651197,  0.14229339,
    #         0.14692008,  0.14369016,  0.14415179,  0.14696634,  0.14894499,
    #         0.14477734,  0.14799911,  0.14581528,  0.14805686,  0.15213815,
    #         0.15114227,  0.15006068,  0.15275545,  0.14786021,  0.15050873,
    #         0.15182426,  0.15045126,  0.15162808,  0.15316264,  0.15260427,
    #         0.15344267,  0.15295611,  0.15199405,  0.15509141,  0.15537893,
    #         0.15574572,  0.15670038,  0.15606494,  0.15604411,  0.15811363,
    #         0.15846973,  0.15665362,  0.15824544,  0.1596564 ,  0.16091131,
    #         0.16247118,  0.1612889 ,  0.16283788,  0.16342476,  0.16163312,
    #         0.16336977,  0.16379681,  0.16476496,  0.16551407,  0.16548602,
    #         0.16335721,  0.16645326,  0.16795859,  0.16809291,  0.1664389 ,
    #         0.16775292,  0.16794246,  0.16905802,  0.1688391 ,  0.17042498,
    #         0.17034883,  0.17252342,  0.17179349,  0.17069648,  0.17154945,
    #         0.17375064,  0.17145106,  0.17390472,  0.17468701,  0.17579511,
    #         0.17488493,  0.17716952,  0.1772454 ,  0.17746182,  0.1793806 ,
    #         0.17898087,  0.18168633,  0.1802443 ,  0.18269892,  0.18153248,
    #         0.18198824,  0.18245133,  0.18408391,  0.1841588 ,  0.1823694 ,
    #         0.18342187,  0.18277587,  0.18432153,  0.18434262,  0.18646492,
    #         0.18142537,  0.18375346,  0.18452003,  0.18206167,  0.18436599,
    #         0.18526836,  0.18532242,  0.18269651,  0.18408388,  0.18280546,
    #         0.18031327,  0.1787032 ,  0.18012824,  0.17941206,  0.18051384,
    #         0.17857422,  0.17739165,  0.17924929])
    # topic_similarity = np.array([ 0.48175808,  0.35969408,  0.30268244,  0.26061526,  0.21553519,
    #         0.19867059,  0.17431647,  0.1695465 ,  0.16758452,  0.14238672,
    #         0.14244975,  0.13592443,  0.12133374,  0.11675137,  0.1104067 ,
    #         0.11096589,  0.09615196,  0.09286034,  0.09192836,  0.09263339,
    #         0.09300293,  0.08082325,  0.07974773,  0.07617059,  0.077886  ,
    #         0.07217608,  0.06941329,  0.0644513 ,  0.06506072,  0.06585726,
    #         0.06444667,  0.06208396,  0.05919808,  0.05802671,  0.05818001,
    #         0.05471487,  0.05583186,  0.05429249,  0.05245915,  0.05259367,
    #         0.05010044,  0.05040057,  0.05037151,  0.04830328,  0.04713662,
    #         0.04848067,  0.04512875,  0.04555011,  0.04437763,  0.04255682,
    #         0.04309551,  0.04304514,  0.0427118 ,  0.040154  ,  0.04278433,
    #         0.04165907,  0.038795  ,  0.03790447,  0.03721742,  0.03873809,
    #         0.03614853,  0.03741072,  0.03625366,  0.0370956 ,  0.03609413,
    #         0.03452013,  0.03462409,  0.03444836,  0.0341728 ,  0.0334566 ,
    #         0.03395155,  0.03328395,  0.03178548,  0.03241834,  0.03198357,
    #         0.03092008,  0.0314571 ,  0.03188229,  0.03107001,  0.03094987,
    #         0.03042475,  0.03031736,  0.02968979,  0.02956764,  0.02885874,
    #         0.02850756,  0.02872543,  0.02885102,  0.0278739 ,  0.02704047,
    #         0.02838199,  0.0271071 ,  0.02711865,  0.02654346,  0.0267635 ,
    #         0.02649694,  0.02663309,  0.02555343,  0.02538249,  0.02538675,
    #         0.02574525,  0.02431164,  0.02515789,  0.02556346,  0.02457752,
    #         0.02427718,  0.02466239,  0.02385928,  0.0234345 ,  0.02392136,
    #         0.02303674,  0.02325547,  0.02360916,  0.02189685,  0.02259953,
    #         0.02220356,  0.02285778,  0.02098455,  0.02152605,  0.02110438,
    #         0.02162684,  0.02089287,  0.02084138,  0.019897  ,  0.0194296 ,
    #         0.01912407,  0.01896952,  0.01856231,  0.01863061,  0.0183473 ,
    #         0.01824505,  0.01786235,  0.01745208,  0.01780592,  0.01697823,
    #         0.01664856,  0.01678494,  0.01656961,  0.01648673,  0.01627983,
    #         0.01564524,  0.0153094 ,  0.01562635,  0.01531365,  0.01517866,
    #         0.01504619,  0.01457172,  0.01477113,  0.01448706,  0.01402278,
    #         0.01431557,  0.01379982,  0.0133312 ,  0.01373544,  0.01315589,
    #         0.01329391,  0.01293711,  0.01343571,  0.01293907,  0.01257149,
    #         0.01229408,  0.01176287,  0.01123712,  0.01117922,  0.01119672,
    #         0.01061634,  0.01048306,  0.00999544,  0.00990419,  0.00983667,
    #         0.00923251,  0.00929287,  0.00893437,  0.00830286,  0.00808173,
    #         0.00774235,  0.00761957,  0.00743553,  0.00731256,  0.00725261,
    #         0.0063825 ,  0.00609158,  0.00559025,  0.00536236,  0.00501713,
    #         0.00466952,  0.00436606,  0.00402217,  0.00389107,  0.00369759,
    #         0.00343503,  0.00331605,  0.00309118,  0.00290579,  0.00285968,
    #         0.00263017,  0.00255821,  0.00241811])
    # reconst_err = np.array([ 140.01617149,  139.15165644,  138.49038066,  137.87818207,
    #         137.45442142,  136.90954731,  136.48887062,  136.17533868,
    #         135.7365993 ,  135.38145365,  135.08027989,  134.7041473 ,
    #         134.46685839,  134.10395867,  133.79366031,  133.62315961,
    #         133.18298735,  132.96221041,  132.64298368,  132.51267328,
    #         132.3114863 ,  131.98905801,  131.75025046,  131.45206496,
    #         131.33299113,  130.99320229,  130.81712321,  130.61770605,
    #         130.42705534,  130.45521586,  130.08965348,  129.85868764,
    #         129.74529097,  129.56556111,  129.41365037,  129.29866917,
    #         129.08327952,  128.92260562,  128.73370862,  128.69725334,
    #         128.41184414,  128.25176545,  128.15510128,  128.11441288,
    #         127.9234971 ,  127.83687639,  127.5589785 ,  127.44907932,
    #         127.3961424 ,  127.15759086,  127.09378492,  126.91919864,
    #         126.84120295,  126.67904611,  126.58220317,  126.51395581,
    #         126.3473571 ,  126.21758824,  126.08358756,  125.96839136,
    #         125.93630865,  125.74244048,  125.79789693,  125.49452429,
    #         125.50669383,  125.33425911,  125.17435975,  125.13384328,
    #         125.01543299,  124.94825269,  124.82250862,  124.75896302,
    #         124.63837947,  124.55452952,  124.44221941,  124.46842187,
    #         124.40989168,  124.25521519,  124.21644965,  124.04110318,
    #         123.94732596,  123.887368  ,  123.79734489,  123.64498907,
    #         123.63184528,  123.50633211,  123.47207183,  123.36030791,
    #         123.28802274,  123.19334364,  123.10341066,  123.08656938,
    #         122.90223648,  122.82283692,  122.80551984,  122.72453751,
    #         122.6917355 ,  122.56246226,  122.51721989,  122.4399558,
    #         122.35353005,  122.27665618,  122.20009227,  122.12684515,
    #         122.0117161 ,  122.01794974,  121.89736249,  121.81176418,
    #         121.8084999 ,  121.75041819,  121.64021483,  121.59765988,
    #         121.50775799,  121.37501879,  121.39537066,  121.30280293,
    #         121.24093113,  121.20832381,  121.06387438,  120.94645482,
    #         120.89744141,  120.75149813,  120.56955705,  120.44127786,
    #         120.35486408,  120.25616603,  120.06694659,  119.97644546,
    #         119.87304736,  119.71769951,  119.57385207,  119.53447131,
    #         119.47571136,  119.27767241,  119.15079251,  119.08372542,
    #         118.91367027,  118.87827544,  118.78346029,  118.6072047 ,
    #         118.60286888,  118.42140611,  118.37210978,  118.2393147 ,
    #         118.17432507,  118.04194154,  117.92588629,  117.88061081,
    #         117.7393507 ,  117.62485036,  117.63638224,  117.4356683 ,
    #         117.3670615 ,  117.37345674,  117.16490982,  117.11205085,
    #         117.02619291,  116.89220075,  116.82276394,  116.64824524,
    #         116.42571519,  116.19757283,  115.92587956,  115.69425416,
    #         115.58097621,  115.56262354,  115.20106776,  114.94884292,
    #         114.95538267,  114.75152863,  114.70235233,  114.65796451,
    #         114.3932966 ,  114.44169682,  114.32428788,  114.21054879,
    #         114.37731935,  114.02442959,  114.12591426,  113.6887655 ,
    #         114.11902418,  113.91945629,  114.33472288,  114.10108741,
    #         114.27012016,  114.34747186,  114.32172332,  114.5553678 ,
    #         114.76923926,  114.76124315,  115.04969096,  115.21902281,
    #         115.26714148,  115.26787468,  115.02616502,  115.49899949,
    #         115.47466988,  115.46548624])
    #
    # make_similarity_plot(n_topics, tfidf_similarity, topic_similarity, reconst_err, x=300)
